package aplicacao_final;

import static aplicacao_final.MetodosAux.nomeProvaPreencher;
import java.util.Scanner;
import java.io.File;
import java.util.Formatter;
import java.io.FileNotFoundException;

/**
 *
 * @author jony
 */
public class Main {

    static Scanner ler = new Scanner(System.in);

    public static void main(String[] args) throws Exception {

        String[][] participantes = new String[Config.MAX_PARTICIPANTES][Config.N_CAMPOS_INFO];
        int nParticipantes = 0;
        int[][] tempos = new int[Config.MAX_PARTICIPANTES][Config.N_PROVAS];
        String[] provas = new String[Config.N_PROVAS];
        double[][] premios = new double[Config.MAX_PARTICIPANTES][Config.N_PROVAS];
        String[] nomeProva = new String[Config.N_PROVAS];

        System.out.print("BEM VINDO AO MENU DO GRANDE PRÉMIO RODINHAS !!! \n\n");
        String menu = "1- Inscrição de novos participantes. \n2- Visualizar informação dos concorrentes já inscritos. \n3- Atualizar informação dos participantes \n4- Carregar informação das provas \n"
                + "5- Preenchimentos dos tempos realizados nas provas \n6- Calcular prémios dos participantes numa relativa prova \n7- Guardar informações em backup \n8- Remover informação de um participante \n9- Inserir novo participante \n10- Para um determinado participante, a velocidade média em cada uma das provas em que participou, bem como a do mais rápido e do mais lento dessa prova \n11- Para cada prova, ver a média das velocidades médias da prova e o total de prémios entregues nessa prova \n12- Informação dos participantes e prémio total recebido \n0- Digite para terminar \n\nEscolha uma opção: ";

        int op;
        do {
            System.out.print(menu);
            op = ler.nextInt();
            ler.nextLine();
            System.out.println();
            switch (op) {
                case 1:
                    nParticipantes = inscricoes(participantes, nParticipantes);
                    System.out.println();
                    System.out.println("Informação carregada com sucesso !!");
                    MetodosAux.pausa();
                    break;
                case 2:
                    listarPaginas(participantes, nParticipantes);
                    System.out.println();
                    MetodosAux.pausa();
                    break;
                case 3:
                    System.out.println("Qual o número de sócio que pretende atualizar?");
                    String nSocio = ler.nextLine();
                    actualizarInfoParticipante(nSocio, participantes, nParticipantes);
                    MetodosAux.pausa();
                    break;
                case 4:

                    if (lerInformacaoProvas(provas, nomeProva) == true) {
                        System.out.println("Informação guardada com sucesso! ");
                    } else {
                        System.out.println("Informação contêm erros, impossível carregar no ficheiro. ");
                    }
                    MetodosAux.pausa();
                    break;
                case 5:
                    lerProva(tempos, participantes, provas, nParticipantes);
                    MetodosAux.pausa();
                    break;
                case 6:
                    if (calcularPremios(provas, participantes, nParticipantes, tempos, premios) == false) {
                        System.out.println("Nome da prova incorreto");
                    }
                    MetodosAux.pausa();
                    break;
                case 7:
                    backupInformacao(participantes, nParticipantes, tempos, provas);
                    MetodosAux.pausa();
                    break;
                case 8:
                    System.out.println("Qual o número de sócio que quer remover? ");
                    String num = ler.nextLine();
                    nParticipantes = removerDadosParticipante(num, participantes, nParticipantes, tempos, premios);
                    MetodosAux.pausa();
                    break;
                case 9:
                    nParticipantes = inserirNovoParticipante(participantes, nParticipantes);
                    MetodosAux.pausa();
                    break;
                case 10:
                    System.out.println("Qual o número de sócio do participante? ");
                    String num1 = ler.nextLine();
                    velocidadeMediaParticipante(num1, nomeProva, participantes, nParticipantes, tempos, provas);
                    MetodosAux.pausa();
                    break;
                case 11:
                    velocidadeMediaProva(nomeProva, participantes, provas, nParticipantes, tempos, premios);
                    MetodosAux.pausa();
                    break;
                case 12:
                    criarFicheiro(participantes, tempos, nParticipantes, provas, premios);
                    MetodosAux.pausa();
                    break;
                case 0:
                    System.out.println("FIM");
                    System.out.println("OBRIGADO PELA SUA COLABORAÇÃO E ADEUS!!");
                    break;
                default:
                    System.out.println("Opção inválida!!");
            }
        } while (op != 0);

    }

    // 1 Módulo
    public static int inscricoes(String[][] participantes, int nParticipantes) throws Exception {

        String nomeFich = MetodosAux.lerFicheiro();
        // Abrimos o ficheiro
        Scanner fln = new Scanner(new File(nomeFich));
        while (fln.hasNext() && nParticipantes < Config.MAX_PARTICIPANTES) {
            String linha = fln.nextLine();  //lê linha a linha o ficheiro 

            if (linha.trim().length() > 0) {
                nParticipantes = MetodosAux.guardarDados(linha, participantes, nParticipantes);

            }
        }
        fln.close();
        return nParticipantes;// fechamos o ficheiro
    }

    // Módulo 2 para listar as páginas
    public static void listarPaginas(String[][] participantes, int nParticipantes) {

        int contPaginas = 0;
        for (int i = 0; i < nParticipantes; i++) {
            if (i % Config.MAX_LINHAS_PAGINA == 0) {
                if (contPaginas > 0) {
                    MetodosAux.pausa();
                }
                contPaginas++;

                System.out.println("Página nº " + contPaginas);
                System.out.println("");
                MetodosAux.cabecalho();
            }
            for (int j = 0; j < Config.N_CAMPOS_INFO; j++) {
                if (j == 1) {
                    System.out.printf("%-40s", participantes[i][j]);
                } else {
                    System.out.printf("%-12s", participantes[i][j]);
                }
            }
            System.out.println("");
        }
        System.out.println(nParticipantes + " inscritos");
    }

    // Módulo 3
    public static void actualizarInfoParticipante(String nSocio, String[][] participantes, int nParticipantes) {
        int pos;
        if ((pos = MetodosAux.procurarElemento(nSocio, participantes, nParticipantes)) > -1) {
            int op;
            do {
                System.out.println();
                MetodosAux.mostrarParticipante(participantes[pos]);
                System.out.println();
                op = MetodosAux.menuInfoParticipante();
                switch (op) {
                    case 1:
                        String nome;
                        System.out.println("Novo nome");
                        nome = ler.nextLine();
                        if (nome.trim().length() > 0) {
                            participantes[pos][1] = nome;
                        } else {
                            System.out.println("Nome inválido! Impossível alterar o nome do sócio.\n ");
                        }
                        MetodosAux.pausa();
                        break;
                    case 2:
                        String marca;
                        System.out.println("Nova marca do automóvel: ");
                        marca = ler.nextLine();
                        if (marca.trim().length() > 0) {
                            participantes[pos][2] = marca;
                        } else {
                            System.out.println("Marca inválida, impossível alterar a marca do automóvel.\n");
                        }
                        MetodosAux.pausa();
                        break;
                    case 3:
                        String data;
                        System.out.println("Nova data de construção: ");
                        data = ler.nextLine();
                        if (data.trim().length() > 0 && MetodosAux.verificarData(data) == true) {
                            participantes[pos][3] = data;
                        } else {
                            System.out.println("Data inválida, impossível alterar data.\n");
                        }
                        MetodosAux.pausa();
                        break;
                    case 0:
                        System.out.println("FIM");
                        break;
                    default:
                        System.out.println("Opção inválida");
                }
            } while (op != 0);
        } else {
            System.out.printf("O participante %s não foi encontrado!", nSocio);
        }
    }

    //Módulo 4
    public static boolean lerInformacaoProvas(String[] provas, String[] nomeProva) throws FileNotFoundException {

        int nElem = 0;
        Scanner fln = new Scanner(new File(Config.NOME_FICHEIRO_PROVAS));
        while (fln.hasNext()) {
            String linha = fln.nextLine();
            if (linha.length() > 0) {
                String[] temp = linha.trim().split(";");
                if (temp.length + nElem <= Config.N_PROVAS) {
                    for (int i = 0; i < temp.length; i++) {
                        String str = temp[i].trim().replace(":", "-").replace("KM", "").replace("Km", "").replace("km", "");
                        if (str.length() > 0) {
                            provas[nElem] = str.trim();
                            nElem++;
                        }
                    }

                }
            }
        }
        fln.close();
        nomeProvaPreencher(provas, nomeProva);
        return nElem > 0;
    }

    // Módulo 5
    public static void lerProva(int[][] tempos, String[][] participantes, String[] provas, int nParticipantes) throws FileNotFoundException {

        String nomeFich = MetodosAux.lerFicheiro();
        boolean ver = true;
        Scanner fln = new Scanner(new File(nomeFich));
        String linha;
        while (fln.hasNext() && ver == true) {
            linha = fln.nextLine();
            if (linha.trim().length() > 0) {
                if (MetodosAux.verificacoesEspacosLinhas(linha) == false) {
                    System.out.println("Erro: ficheiro contêm erros nos dados");
                    ver = false;
                }
            }
        }
        fln.close();
        if (ver) {
            System.out.println();
            System.out.println("Ficheiro sem erros");
            String nomeProva = nomeFich.trim().split("\\.")[0].trim();
            int indiceProva = MetodosAux.procurarProva(nomeProva, provas);
            if (indiceProva != -1) {
                MetodosAux.inserirMatrizTempos(nomeFich, indiceProva, tempos, participantes, nParticipantes);
                System.out.printf("Tempos da prova %s foram carregados com sucesso! ", nomeProva);
            } else {
                System.out.printf("\nProva incorreta, impossível carregar os tempos!! ");
            }
        }
    }

    // Módulo 6
    public static boolean calcularPremios(String[] provas, String[][] participantes, int nParticipantes, int[][] tempos, double[][] premios) {

        System.out.println("Qual o nome da prova? ");
        String nomeProva = ler.nextLine();
        int indiceProva = MetodosAux.procurarProva(nomeProva, provas);

        if (indiceProva != -1) {
            int melhorTempo = MetodosAux.calcMelhorTempo(tempos, nParticipantes, indiceProva);
            int distanciaProva = MetodosAux.calcDistanciaProvas(provas, indiceProva);
            for (int i = 0; i < nParticipantes; i++) {
                String anoMesDia = MetodosAux.converterddmmaaaaParaaaammdd(participantes[i][3]);
                int idadeAutomovel = MetodosAux.idadeDoAutomovel(anoMesDia);
                premios[i][indiceProva] = MetodosAux.calcPremios(melhorTempo, distanciaProva, idadeAutomovel, tempos, i, indiceProva);
                System.out.println(premios[i][indiceProva]);
            }
            System.out.println("Informação dos prémios carregada com sucesso !!");
            return true;
        }
        return false;
    }

    //Módulo 7
    public static void backupInformacao(String[][] participantes, int nParticipantes, int[][] tempos, String[] provas) throws Exception {

        Formatter fOutput = new Formatter(new File(Config.NOME_FICHEIRO_BACKUP));

        for (int i = 0; i < nParticipantes; i++) {
            for (int j = 0; j < Config.N_CAMPOS_INFO; j++) {
                fOutput.format("%s;", participantes[i][j]);
            }
            for (int j = 0; j < Config.N_PROVAS; j++) {
                fOutput.format("%d;", tempos[i][j]);
            }

            fOutput.format("%n");
        }
        fOutput.format("/%n");

        for (int i = 0; i < Config.N_PROVAS; i++) {
            fOutput.format("%s%n", provas[i]);
        }
        fOutput.close();
        System.out.println("Informação gravada com sucesso no ficheiro backup ");
    }

    //Módulo 8
    public static int removerDadosParticipante(String num, String[][] participantes, int nParticipantes, int[][] tempos, double[][] premios) {

        int pos = MetodosAux.procurarElemento(num, participantes, nParticipantes);
        if (pos != -1) {
            for (int i = 0; i < Config.N_CAMPOS_INFO; i++) {
                for (int j = pos; j < nParticipantes; j++) {
                    participantes[j][i] = participantes[j + 1][i];
                }
            }
            for (int i = 0; i < Config.N_PROVAS; i++) {
                for (int j = pos; j < nParticipantes; j++) {
                    tempos[j][i] = tempos[j + 1][i];
                    premios[j][i] = premios[j + 1][i];
                }
            }
            nParticipantes--;
        } else {
            System.out.println("Número de sócio não encontrado!");
        }
        return nParticipantes;
    }

    //Método 9
    public static int inserirNovoParticipante(String[][] participantes, int nParticipantes) {
        boolean ans = true;
        System.out.println("Qual o número de sócio do novo participante? ");
        String num = ler.nextLine();
        int pos = MetodosAux.procurarElemento(num, participantes, nParticipantes);
        if (MetodosAux.verificacoesInscricaoEspacos(num) == false || pos != -1) {
            ans = false;
        }
        System.out.println("Qual o nome do novo participante? ");
        String nome = ler.nextLine();
        if (MetodosAux.verificacoesInscricaoEspacos(nome) == false) {
            ans = false;
        }
        System.out.println("Qual a marca do seu automóvel? ");
        String marca = ler.nextLine();
        if (MetodosAux.verificacoesInscricaoEspacos(marca) == false) {
            ans = false;
        }
        System.out.println("Qual a data do seu automóvel(FORMATO DD/MM/AAAA)? ");
        String data = ler.nextLine();
        if (MetodosAux.verificacoesInscricaoEspacos(data) == false || MetodosAux.verificarData(data) == false) {
            ans = false;
        }
        if (ans == true) {
            nParticipantes = MetodosAux.inscricaoNovoParticipante(num, nome, marca, data, participantes, nParticipantes);
        } else {
            System.out.printf("Impossível inscrever %s, dados incorretos! ", nome);
        }
        return nParticipantes;
    }

    //Módulo 10
    public static void velocidadeMediaParticipante(String num1, String[] nomeProva, String[][] participantes, int nParticipantes, int[][] tempos, String[] provas) {

        int pos = MetodosAux.procurarElemento(num1, participantes, nParticipantes);
        if (pos != -1) {
            MetodosAux.velocidadesMedia(pos, nomeProva, participantes, nParticipantes, tempos, provas);
        } else {
            System.out.printf("Número de sócio %s não foi encontrado! ", num1);
        }
    }

    //Módulo 11
    public static void velocidadeMediaProva(String[] nomeProva, String[][] participantes, String[] provas, int nParticipantes, int[][] tempos, double[][] premios) {

        for (int j = 0; j < Config.N_PROVAS; j++) {
            if (tempos[0][j] > 0) {                     //VERIFICAR APENAS PARA AS PROVAS QUE JÁ CONTÊM INFORMAÇÃO!!
                float somaTotal = 0;
                int nElProva = 0;
                float mediaTotal = 0;
                float premioTotal = 0;
                int menorTempo = 99999;
                float velocidadePartiMaisRapido = 0;

                int distancia = MetodosAux.calcDistanciaProvas(provas, j);
                for (int i = 0; i < nParticipantes; i++) {
                    if (tempos[i][j] > 0) {
                        if (tempos[i][j] < menorTempo) {
                            menorTempo = tempos[i][j];
                        }
                        int idade = MetodosAux.idadeDoAutomovel(MetodosAux.converterddmmaaaaParaaaammdd(participantes[i][3]));
                        float velocidadeMediaParticipante = MetodosAux.calcVelocidadeMedia(tempos[i][j], j, provas);
                        float premio = (float) MetodosAux.calcPremios(menorTempo, distancia, idade, tempos, i, j);
                        somaTotal = somaTotal + velocidadeMediaParticipante;
                        premioTotal = premioTotal + premio;
                        nElProva++;
                    }
                }
                mediaTotal = (float) (somaTotal / nElProva);
                velocidadePartiMaisRapido = MetodosAux.calcVelocidadeMedia(menorTempo, j, provas);
                System.out.printf("A velocidade média da prova %s é %.2f km/h %n", nomeProva[j], mediaTotal);
                System.out.printf("A velocidade média do participante mais rápido da prova %s é %.2f km/h %n", nomeProva[j], velocidadePartiMaisRapido);
                System.out.printf("O prémio total atribuído na prova %s foi de %.2f € %n", nomeProva[j], premioTotal);
                System.out.println();
            }
        }
    }

    //Método12
    public static void criarFicheiro(String[][] participantes, int[][] tempos, int nParticipantes, String[] provas, double[][] premios) throws FileNotFoundException {
        double total = 0;
        Formatter novoFich = new Formatter(new File("GrandePremio.txt"));
        double[] totPremios = new double[nParticipantes];
        int[] indTotPrem = new int[nParticipantes];
        MetodosAux.calcularPremios(premios, totPremios, indTotPrem);
        MetodosAux.ordenarTotalPremios(totPremios, indTotPrem, premios);

        novoFich.format("%50s%n", "Listagem de Prémios");
        novoFich.format("%-6s", "Num");
        novoFich.format("%3s", " ");
        novoFich.format("%-20s", "Nome");
        novoFich.format("%-20s", "Idade Automóvel");
        novoFich.format("%20s%n", "Total de Prémios");

        for (int i = 0; i < totPremios.length; i++) {
            int ind = indTotPrem[i];
            novoFich.format("%-6s", participantes[ind][0]);
            novoFich.format("%3s", "");
            novoFich.format("%-20s", MetodosAux.converterNome(participantes[ind][1]));
            novoFich.format("%-10s", MetodosAux.idadeDoAutomovel(MetodosAux.converterddmmaaaaParaaaammdd(participantes[ind][3])));
            novoFich.format("%12s", "");
            novoFich.format("%18.2f%n", totPremios[i]);
            total = total + totPremios[i];
        }
        novoFich.format("%50s", "TOTAL");
        novoFich.format("%19.2f%n", total);
        String agora = MetodosAux.determinarInstante();
        novoFich.format("%-65s", agora);
        novoFich.close();
    }
}
